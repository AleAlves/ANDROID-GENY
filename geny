#!/usr/bin/env ruby


#app -> src -> flavor -> java
module MessagePrinter

    def colorize(text, color = "yellow", bgColor = "default")
      colors = {"default" => "38", "black" => "30", "red" => "1;31", "green" => "1;32", "brown" => "33", "blue" => "1;34", "purple" => "35",
                "cyan" => "36", "gray" => "37", "dark gray" => "1;30", "light red" => "1;31", "light green" => "1;32", "yellow" => "1;33",
                "light blue" => "1;34", "light purple" => "1;35", "light cyan" => "1;36", "white" => "1;37"}
      bgColors = {"default" => "0", "black" => "40", "red" => "41", "green" => "42", "brown" => "43", "blue" => "44",
                  "purple" => "45", "cyan" => "46", "gray" => "47", "dark gray" => "100", "light red" => "101", "light green" => "102",
                  "yellow" => "103", "light blue" => "104", "light purple" => "105", "light cyan" => "106", "white" => "107"}
      color_code = colors[color]
      bgColor_code = bgColors[bgColor]
      "\033[#{bgColor_code};#{color_code}m#{text}\033[0m"
    end
  
    def error message
      puts "#{colorize("  Error ", "red")}: "+message
    end
  
    def green message
      "#{colorize(message, "green")}"
    end
  
    def blue message
      "#{colorize(message, "blue")}"
    end
  
    def yellow message
      "#{colorize(message, "yellow")}"
    end
  
    def use_help
      puts "Use --help to see available commands."
    end
  
    def command_not_found
      puts
      error("Command not found, use --help to see available commands.")
    end
  
    def wrong_number_of_args
      error("Wrong number of arguments, use --help to see correct format and commands.")
    end
  
    def not_correct_format
      error("Not a correct format, use --help to see available options.")
    end
  
    def flags_and_package_optional
      puts "-l  : Generates a layout file"
      puts "-bl : Generates a bindable layout file"
      puts
      puts "Package and Layout flags are optional"
      puts
    end
  
    def activity_examples
      puts
      puts yellow("Example : ") + "geny activity [-l or -bl] YourActivity [some.package]"
      puts
      flags_and_package_optional
    end
  
    def fragment_examples
      puts
      puts yellow("Example : ") + "geny fragment [-l or -bl] YourFragment [some.package]"
      puts
      flags_and_package_optional
    end
  
    def layout_examples
      puts
      puts yellow("Example : ") + "geny layout layout_name"
      puts yellow("Example : ") + "geny layout -bl layout_name"
      puts
      puts yellow("-bl ")+"flag will generate a Bindable layout!"
      puts
    end
  
    def created file
      puts "#{colorize("  Created   ", 'green')}"+file.sub(@module_dir.to_s+'/', '')
    end
  
    def updated file
      puts "#{colorize("  Updated   ", 'blue')}"+file
    end
  
    def help_0
      puts yellow "Android Generators"
      puts yellow("  Command          ")+ "|" + yellow("   Arguments       ")
      puts '  -------------------------------------------------------------------'
      puts '  Library         |     [Name] [Package] [Feature]'
      puts '  -------------------------------------------------------------------'
      puts
      puts yellow "Optional flags"
      puts yellow("  Flag             ")+ "|" + yellow("   Definition       ")
      puts '  ------------------------------------------------------------------'
      puts '  -l               |   Generates layout file '
      puts '  -bl              |   Generates bindable layout file '
      puts '  ------------------------------------------------------------------'
      puts
      puts 'Default package: top-most is selected.'
    end
  
    def version_0
      puts 'geny v0.0.1'
    end
  end
  
  module Helper
  
    def command_is_accepted? command
      accepted_commands = ['library','--help', '--version']
      accepted_commands.to_a.include?(command.to_s.downcase)
    end
  
    def is_flag? flag_or_name
      case flag_or_name
        when '-l'
          @flag = :layout
          return true
        when '-bl'
          @flag = :bindable_layout
          return true
        else
          return false
      end
    end

    def create_file file, template
      File.open(file, 'w') { |file| file.write(template) }
      created file
    end

    def create_folder name
        FileUtils.mkdir_p(name)
      end
  end

  module Library

    def library_1 feature
      create_library feature
    end

    def create_library feature  

        modelFactory = ModelSample.new
        routesFactory = RoutesFactory.new
        usecaseFactory = UseCaseSample.new
        controllerFactory = ControllerFacotry.new

        #Core Library Directories

        extension = ".ts"

        root = "#{feature.downcase}/"
        usecase = "#{root}usecase/"
        model = "#{root}model/"

        create_folder root
        create_folder usecase
        create_folder model

        modelFactory.feature = feature
        usecaseFactory.feature = feature
        controllerFactory.feature = feature
        routesFactory.feature = feature

        #Core files
        create_file  model + modelFactory.name, modelFactory.get
        create_file  usecase + usecaseFactory.getName, usecaseFactory.getFile
        create_file  usecase + usecaseFactory.createName, usecaseFactory.createFile
        create_file  usecase + usecaseFactory.updateName, usecaseFactory.updateFile
        create_file  usecase + usecaseFactory.deleteName, usecaseFactory.deleteFile
        create_file  root + controllerFactory.name, controllerFactory.file
        create_file root + routesFactory.name, routesFactory.file


        #Feature Directories
        # feature_dir = []
        # data_dir = feature.downcase+ "/"+ folder.clean_data_package_template 
        # di_dir = feature.downcase+ "/"+ folder.clean_di_package_template 
        # domain_dir = feature.downcase+ "/"+ folder.clean_domain_package_template 
        # presentation_dir = feature.downcase+ "/"+ folder.clean_presentation_package_template + "/"

        # feature_dir.push(data_dir, di_dir, domain_dir, presentation_dir)
        # feature_dir.each{ |folder| create_folder main_package_dir + "/"+ folder }

        #Feature Files
        # activity.package = convert_patch_to_package package +"."+ presentation_dir
        # activity.feature = feature
        # values.feature = feature
        
        # create_file values_dir + values.strings_file, values.strings_template
        # create_file   main_package_dir + "/"+ presentation_dir + activity.class, activity.class_template
        # create_file  layout_dir + activity.layout, activity.layout_template

        #Build
        # build = "./gradlew clean"
        #system(build)
    end
  end
  
  class ArgumentsHandler
  
    def start
        case ARGV.length
          when 0
            handle_zero_args
          when 1
            handle_one_arg ARGV[0]
          when 2
            handle_two_args ARGV[0], ARGV[1]
          when 3
            handle_three_args ARGV[0], ARGV[1], ARGV[2]
          when 4
            handle_four_args ARGV[0], ARGV[1], ARGV[2], ARGV[3]
          else
            wrong_number_of_args
        end
    end
  
    def handle_zero_args
      use_help
    end
  
    def handle_one_arg command
      #check if the command is accepted
      if command_is_accepted? command
        send(command.to_s.downcase.sub('--', '')+'_0')
      else
        command_not_found
      end
    end
  
    def handle_two_args command, flag_or_name
      if command_is_accepted? command
        send(command.to_s.downcase+'_1', flag_or_name)
      else
        command_not_found
      end
    end
  
    def handle_three_args command, flag_or_name, package
      if command_is_accepted? command
        send(command.to_s.downcase+'_2', flag_or_name, package)
      else
        command_not_found
      end
    end
  
    def handle_four_args command, flag, name, package
      if command_is_accepted? command
        send(command.to_s.downcase+'_3', flag, name, package)
      else
        command_not_found
      end
    end
  
  end
  
  require 'fileutils'
  require 'set'
  require_relative 'api/model'
  require_relative 'api/usecase'
  require_relative 'api/controller'
  require_relative 'api/route'
  
  include MessagePrinter
  include Helper
  include Library
  
  ArgumentsHandler.new.start